<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Web.Http.WebHost</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.RemoveFromDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},System.Boolean})">
            <summary>
            Remove entries from dictionary that match the removeCondition.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.RemoveFromDictionary``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2,System.Boolean},``2)">
            <summary>
            Remove entries from dictionary that match the removeCondition.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Gets the value of <typeparamref name="T"/> associated with the specified key or <c>default</c> value if
            either the key is not present or the value is not of type <typeparamref name="T"/>. 
            </summary>
            <typeparam name="T">The type of the value associated with the specified key.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.IDictionary`2"/> instance where <c>TValue</c> is <c>object</c>.</param>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter.</param>
            <returns><c>true</c> if key was found, value is non-null, and value is of type <typeparamref name="T"/>; otherwise false.</returns>
        </member>
        <member name="T:System.Web.Http.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:System.Web.Http.Error.Format(System.String,System.Object[])">
            <summary>
            Formats the specified resource string using <see cref="M:CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.Argument(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotHttpOrHttpsScheme(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an "http" or "https" URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriNotAbsolute(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentUriHasQueryOrFragment(System.String,System.Uri)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a message saying that the argument must be an absolute URI 
            without a query or fragment identifier and then logs it with <see cref="F:TraceLevel.Error"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.PropertyNull">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNull(System.String,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentOutOfRange(System.String,System.Object,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with the provided properties.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeGreaterThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be greater than or equal to <paramref name="minValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="minValue">The minimum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ArgumentMustBeLessThanOrEqualTo(System.String,System.Object,System.Object)">
            <summary>
            Creates an <see cref="T:System.ArgumentOutOfRangeException"/> with a message saying that the argument must be less than or equal to <paramref name="maxValue"/>.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="actualValue">The value of the argument that causes this exception.</param>
            <param name="maxValue">The maximum size of the argument.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.KeyNotFound(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.Collections.Generic.KeyNotFoundException"/> with a message saying that the key was not found.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.ObjectDisposed(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.ObjectDisposedException"/> initialized according to guidelines.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.OperationCanceled(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.OperationCanceledException"/> initialized with the provided parameters.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidEnumArgument(System.String,System.Int32,System.Type)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> for an invalid enum argument.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <param name="invalidValue">The value of the argument that failed.</param>
            <param name="enumClass">A <see cref="T:System.Type"/> that represents the enumeration class with the valid values.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.InvalidOperation(System.Exception,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="innerException">Inner exception</param>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:System.Web.Http.Error.NotSupported(System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
            <param name="messageFormat">A composite format string explaining the reason for the exception.</param>
            <param name="messageArgs">An object array that contains zero or more objects to format.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="T:System.Web.Http.HttpMethodHelper">
            <summary>
            Various helper methods for the static members of <see cref="T:System.Net.Http.HttpMethod"/>. 
            </summary>
        </member>
        <member name="M:System.Web.Http.HttpMethodHelper.GetHttpMethod(System.String)">
            <summary>
            Gets the static <see cref="T:System.Net.Http.HttpMethod"/> instance for any given HTTP method name.
            </summary>
            <param name="method">The HTTP request method.</param>
            <returns>An existing static <see cref="T:System.Net.Http.HttpMethod"/> or a new instance if the method was not found.</returns>
        </member>
        <member name="T:System.Web.Http.NonOwnedStream">
            <summary>Represents a stream that replaces another stream to prevent actually closing that stream.</summary>
            <remarks>
            This class uses the Decorator [GoF] pattern; it forwards all calls except those related to Dispose and Close.
            </remarks>
        </member>
        <member name="T:System.Web.Http.WebHost.Routing.HttpRouteExceptionHandler">
            <summary>Represents a handler that asynchronously handles an unhandled exception from routing.</summary>
        </member>
        <member name="T:System.Web.Http.WebHost.Routing.HttpRouteExceptionRouteHandler">
            <summary>Represents a route handler that asynchronously handles an unhandled exception from routing.</summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.VirtualPathRoot">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Count">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Item(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.ValidateConstraint(System.String,System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Clear">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:System.Web.Http.WebHost.Routing.HostedHttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
            <inheritdoc/>
        </member>
        <member name="T:System.Web.Http.WebHost.Routing.HttpWebRoute">
            <summary>
            Mimics the System.Web.Routing.Route class to work better for Web API scenarios. The only
            difference between the base class and this class is that this one will match only when
            a special "httproute" key is specified when generating URLs. There is no special behavior
            for incoming URLs.
            </summary>
        </member>
        <member name="F:System.Web.Http.WebHost.Routing.HttpWebRoute.HttpRouteKey">
            <summary>
            Key used to signify that a route URL generation request should include HTTP routes (e.g. Web API).
            If this key is not specified then no HTTP routes will match.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Routing.HttpWebRoute.HttpRoute">
            <summary>
            Gets the <see cref="T:System.Web.Http.Routing.IHttpRoute"/> associated with this <see cref="T:System.Web.Http.WebHost.Routing.HttpWebRoute"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostExceptionCatchBlocks">
            <summary>Provides the catch blocks used within this assembly.</summary>
        </member>
        <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerBufferContent">
            <summary>
            Gets the label for the catch block in
            <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/>.WriteBufferedResponseContentAsync.
            </summary>
            <remarks>
            This catch block handles exceptions when writing the <see cref="T:System.Net.Http.HttpContent"/> under an
            <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector"/> that buffers.
            </remarks>
        </member>
        <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerBufferError">
            <summary>
            Gets the label for the catch block in <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/>.WriteErrorResponseContentAsync.
            </summary>
            <remarks>
            This catch block handles exceptions when writing the <see cref="T:System.Net.Http.HttpContent"/> of the error response itself
            (after <see cref="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerBufferContent"/> or <see cref="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute"/>).
            </remarks>
        </member>
        <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerComputeContentLength">
            <summary>
            Gets the label for the catch block in <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/>.ComputeContentLength.
            </summary>
            <remarks>
            This catch block handles exceptions when calling <see cref="M:System.Net.Http.HttpContent.TryComputeLength(System.Int64@)"/>.
            </remarks>
        </member>
        <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpControllerHandlerStreamContent">
            <summary>
            Gets the label for the catch block in
            <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/>.WriteStreamedResponseContentAsync.
            </summary>
            <remarks>
            This catch block handles exceptions when writing the <see cref="T:System.Net.Http.HttpContent"/> under an
            <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector"/> that does not buffer.
            </remarks>
        </member>
        <member name="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute">
            <summary>Gets the label for the catch block in <see cref="P:System.Web.Http.WebHost.WebHostExceptionCatchBlocks.HttpWebRoute"/>.GetRouteData.</summary>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostBufferPolicySelector">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector"/> suited for use
            in an ASP.NET environment which provides direct support for input and output buffering.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
            <summary>
            Determines whether the host should buffer the entity body when processing a request with content.
            </summary>
            <param name="hostContext">The host-specific context.  In this case, it is an instance
            of <see cref="T:System.Web.HttpContextBase"/>.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed request should be used.</returns>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
            <summary>
            Determines whether the host should buffer the <see cref="T:System.Net.Http.HttpResponseMessage"/> entity body.
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/>response for which to determine
            whether host output buffering should be used for the response entity body.</param>
            <returns><c>true</c> if buffering should be used; otherwise a streamed response should be used.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.HttpControllerTypeCacheSerializer">
            <summary>
            Manages serializing and deserializing the cache managed by <see cref="T:System.Web.Http.Dispatcher.HttpControllerTypeCache"/>.
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostExceptionHandler">
            <summary>Provides the default implementation for handling exceptions within Web API web host.</summary>
            <remarks>
            This class preserves the legacy behavior of catch blocks and is the the default registered IExceptionHandler
            for web host.
            </remarks>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostHttpControllerTypeResolver">
            <summary>
            Wraps ASP build manager
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
            <summary>
            Returns a list of controllers available for the application.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of controllers.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.SuppressFormsAuthRedirectHelper">
            <summary>
            Helper methods for Suppressing Form Authentication Redirect
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.SuppressFormsAuthRedirectHelper.GetEnabled(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns whether the module is explicitly enabled or not
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.WebHostAssembliesResolver">
            <summary>
            Provides an implementation of <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver"/> using <see cref="T:System.Web.Compilation.BuildManager"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.WebHostAssembliesResolver.System#Web#Http#Dispatcher#IAssembliesResolver#GetAssemblies">
            <summary>
            Returns a list of assemblies that will be searched for types that implement IHttpController, such as ApiController.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> of assemblies.</returns>
        </member>
        <member name="T:System.Web.Http.WebHost.Properties.SRResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RequestBodyAlreadyRead">
            <summary>
              Looks up a localized string similar to Unable to read the entity body. A portion of the request stream has already been read..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RequestBodyAlreadyReadInMode">
            <summary>
              Looks up a localized string similar to Unable to read the entity body. The request stream has already been read in &apos;{0}&apos; mode..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RequestStreamCannotBeReadBufferless">
            <summary>
              Looks up a localized string similar to Unable to read the entity body in Bufferless mode. The request stream has already been buffered..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Route_ValidationMustBeStringOrCustomConstraint">
            <summary>
              Looks up a localized string similar to The constraint entry &apos;{0}&apos; on the route with route template &apos;{1}&apos; must have a string value or be of a type which implements &apos;{2}&apos; or &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionNotSupported">
            <summary>
              Looks up a localized string similar to This operation is not supported by &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionOutOfRange">
            <summary>
              Looks up a localized string similar to The index cannot be less than 0 or equal to or larger than the number of items in the collection..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.RouteCollectionUseDirectly">
            <summary>
              Looks up a localized string similar to This operation is only supported by directly calling it on &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Serialize_Response_Failed">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type failed to serialize the response body..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.Serialize_Response_Failed_MediaType">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; type failed to serialize the response body for content type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.TypeCache_DoNotModify">
            <summary>
              Looks up a localized string similar to This file is automatically generated. Please do not modify the contents of this file..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.SRResources.TypePropertyMustNotBeNull">
            <summary>
              Looks up a localized string similar to {0}.{1} must not be null..
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.Properties.CommonWebApiResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
            
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentInvalidAbsoluteUri">
            <summary>
              Looks up a localized string similar to Relative URI values are not supported: &apos;{0}&apos;. The URI must be absolute..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentInvalidHttpUriScheme">
            <summary>
              Looks up a localized string similar to Unsupported URI scheme: &apos;{0}&apos;. The URI scheme must be either &apos;{1}&apos; or &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentMustBeGreaterThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be greater than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentMustBeLessThanOrEqualTo">
            <summary>
              Looks up a localized string similar to Value must be less than or equal to {0}..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; is null or empty..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.ArgumentUriHasQueryOrFragment">
            <summary>
              Looks up a localized string similar to URI must not contain a query component or a fragment identifier..
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.Properties.CommonWebApiResources.InvalidEnumArgument">
            <summary>
              Looks up a localized string similar to The value of argument &apos;{0}&apos; ({1}) is invalid for Enum type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:System.Web.Http.WebHost.HttpControllerHandler">
            <summary>
            An <see cref="T:System.Web.HttpTaskAsyncHandler"/> that uses an <see cref="T:System.Web.Http.HttpServer"/> to process ASP.NET requests asynchronously.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/> class.
            </summary>
            <param name="routeData">The route data.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.#ctor(System.Web.Routing.RouteData,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/> class.
            </summary>
            <param name="routeData">The route data.</param>
            <param name="handler">The message handler to dispatch requests to.</param>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerHandler.EnsureSuppressFormsAuthenticationRedirect(System.Web.HttpContextBase)">
            <summary>
            Prevents the <see cref="T:System.Web.Security.FormsAuthenticationModule"/> from altering a 401 response to 302 by
            setting <see cref="P:System.Web.HttpResponseBase.SuppressFormsAuthenticationRedirect" /> to <c>true</c> if available.
            </summary>
            <param name="httpContextBase">The HTTP context base.</param>
        </member>
        <member name="T:System.Web.Http.WebHost.HttpControllerRouteHandler">
            <summary>
            A <see cref="T:System.Web.Routing.IRouteHandler"/> that returns instances of <see cref="T:System.Web.Http.WebHost.HttpControllerHandler"/> that
            can pass requests to a given <see cref="T:System.Web.Http.HttpServer"/> instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler"/> class.
            </summary>
        </member>
        <member name="P:System.Web.Http.WebHost.HttpControllerRouteHandler.Instance">
            <summary>
            Gets the singleton <see cref="T:System.Web.Http.WebHost.HttpControllerRouteHandler"/> instance.
            </summary>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.System#Web#Routing#IRouteHandler#GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>
            An object that processes the request.
            </returns>
        </member>
        <member name="M:System.Web.Http.WebHost.HttpControllerRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            Provides the object that processes the request.
            </summary>
            <param name="requestContext">An object that encapsulates information about the request.</param>
            <returns>
            An object that processes the request.
            </returns>
        </member>
        <member name="T:System.Web.Http.WebHost.TaskWrapperAsyncResult">
            <summary>
            Wraps a <see cref="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task"/>, optionally overriding the State object (since the Task Asynchronous Pattern doesn't normally use it).
            </summary>
            <remarks>Class copied from System.Web.Mvc, but with modifications</remarks>
        </member>
        <member name="M:System.Web.Http.WebHost.TaskWrapperAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.WebHost.TaskWrapperAsyncResult"/> class.
            </summary>
            <param name="task">The <see cref="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task"/> to wrap.</param>
            <param name="asyncState">User-defined object that qualifies or contains information about an asynchronous operation.</param>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <returns>A user-defined object that qualifies or contains information about an asynchronous operation.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.CompletedSynchronously">
            <summary>
            Gets a value indicating whether the asynchronous operation completed synchronously.
            </summary>
            <returns>true if the asynchronous operation completed synchronously; otherwise, false.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous operation has completed.
            </summary>
            <returns>true if the operation is complete; otherwise, false.</returns>
        </member>
        <member name="P:System.Web.Http.WebHost.TaskWrapperAsyncResult.Task">
            <summary>
            Gets the task.
            </summary>
        </member>
        <member name="T:System.Web.Http.GlobalConfiguration">
            <summary>
            Provides a global <see cref="T:System.Web.Http.HttpConfiguration"/> for ASP.NET applications.
            </summary>
        </member>
        <member name="P:System.Web.Http.GlobalConfiguration.Configuration">
            <summary>
            Gets the global <see cref="T:System.Web.Http.HttpConfiguration"/>.
            </summary>
        </member>
        <member name="P:System.Web.Http.GlobalConfiguration.DefaultHandler">
            <summary>
            Gets the default message handler that will be called for all requests.
            </summary>
        </member>
        <member name="P:System.Web.Http.GlobalConfiguration.DefaultServer">
            <summary>
            Gets the global <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
        </member>
        <member name="M:System.Web.Http.GlobalConfiguration.Configure(System.Action{System.Web.Http.HttpConfiguration})">
            <summary>
            Performs configuration for <see cref="P:System.Web.Http.GlobalConfiguration.Configuration"/> and ensures that it is
            initialized.
            </summary>
            <param name="configurationCallback">The callback that will perform the configuration.</param>
        </member>
        <member name="T:System.Web.Http.RouteCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Web.Routing.RouteCollection"/>
            </summary>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String)">
            <summary>
            Maps the specified route template.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object)">
            <summary>
            Maps the specified route template and sets default constraints, and namespaces.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object)">
            <summary>
            Maps the specified route template and sets default route values, constraints, and namespaces.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="M:System.Web.Http.RouteCollectionExtensions.MapHttpRoute(System.Web.Routing.RouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
            <summary>
            Maps the specified route template and sets default route values, constraints, namespaces, and end-point message handler.
            </summary>
            <param name="routes">A collection of routes for the application.</param>
            <param name="name">The name of the route to map.</param>
            <param name="routeTemplate">The route template for the route.</param>
            <param name="defaults">An object that contains default route values.</param>
            <param name="constraints">A set of expressions that specify values for <paramref name="routeTemplate"/>.</param>
            <param name="handler">The handler to which the request will be dispatched.</param>
            <returns>A reference to the mapped route.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToObject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It preserves the original stack trace when
            throwing the exception. Note: It is the caller's responsibility not to pass incomplete tasks to this
            method, because it does degenerate into a call to the equivalent of .Wait() on the task when it hasn't yet
            completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
    </members>
</doc>
